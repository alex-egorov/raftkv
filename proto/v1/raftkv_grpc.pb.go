// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package raftkvpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RaftkvServiceClient is the client API for RaftkvService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RaftkvServiceClient interface {
	// Get returns the value for the given key.
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*wrapperspb.StringValue, error)
	// Set sets the value for the given key.
	Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Delete removes the given key.
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Join joins the node, identified by nodeID and reachable at address, to the cluster.
	Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type raftkvServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRaftkvServiceClient(cc grpc.ClientConnInterface) RaftkvServiceClient {
	return &raftkvServiceClient{cc}
}

func (c *raftkvServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*wrapperspb.StringValue, error) {
	out := new(wrapperspb.StringValue)
	err := c.cc.Invoke(ctx, "/raftkvpb.v1.RaftkvService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftkvServiceClient) Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/raftkvpb.v1.RaftkvService/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftkvServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/raftkvpb.v1.RaftkvService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftkvServiceClient) Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/raftkvpb.v1.RaftkvService/Join", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RaftkvServiceServer is the server API for RaftkvService service.
// All implementations should embed UnimplementedRaftkvServiceServer
// for forward compatibility
type RaftkvServiceServer interface {
	// Get returns the value for the given key.
	Get(context.Context, *GetRequest) (*wrapperspb.StringValue, error)
	// Set sets the value for the given key.
	Set(context.Context, *SetRequest) (*emptypb.Empty, error)
	// Delete removes the given key.
	Delete(context.Context, *DeleteRequest) (*emptypb.Empty, error)
	// Join joins the node, identified by nodeID and reachable at address, to the cluster.
	Join(context.Context, *JoinRequest) (*emptypb.Empty, error)
}

// UnimplementedRaftkvServiceServer should be embedded to have forward compatible implementations.
type UnimplementedRaftkvServiceServer struct {
}

func (UnimplementedRaftkvServiceServer) Get(context.Context, *GetRequest) (*wrapperspb.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedRaftkvServiceServer) Set(context.Context, *SetRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedRaftkvServiceServer) Delete(context.Context, *DeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedRaftkvServiceServer) Join(context.Context, *JoinRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Join not implemented")
}

// UnsafeRaftkvServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RaftkvServiceServer will
// result in compilation errors.
type UnsafeRaftkvServiceServer interface {
	mustEmbedUnimplementedRaftkvServiceServer()
}

func RegisterRaftkvServiceServer(s grpc.ServiceRegistrar, srv RaftkvServiceServer) {
	s.RegisterService(&RaftkvService_ServiceDesc, srv)
}

func _RaftkvService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftkvServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raftkvpb.v1.RaftkvService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftkvServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftkvService_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftkvServiceServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raftkvpb.v1.RaftkvService/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftkvServiceServer).Set(ctx, req.(*SetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftkvService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftkvServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raftkvpb.v1.RaftkvService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftkvServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftkvService_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftkvServiceServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raftkvpb.v1.RaftkvService/Join",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftkvServiceServer).Join(ctx, req.(*JoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RaftkvService_ServiceDesc is the grpc.ServiceDesc for RaftkvService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RaftkvService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "raftkvpb.v1.RaftkvService",
	HandlerType: (*RaftkvServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _RaftkvService_Get_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _RaftkvService_Set_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _RaftkvService_Delete_Handler,
		},
		{
			MethodName: "Join",
			Handler:    _RaftkvService_Join_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/v1/raftkv.proto",
}
